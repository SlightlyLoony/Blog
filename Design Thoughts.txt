Architecture:

  There will be three server processes, as follows:
  1.  Monitor server that manages and monitors the other two servers.  This includes running the processes, monitoring their performance, restarting
      them, upgrading/downgrading them, etc.
  2.  HTTPS server that is the main blog server.
  3.  HTTP server that simply redirects to the HTTPS server.


Interprocess messaging:

  The three server processes communicate through a simple network protocol.  The protocol is based on UDP, with packets that contain a single byte
  type code (first byte) followed by a UTF-8 JSON representation of the message (including, redundantly, the type code).  This simple protocol is
  fast and well-suited to the simple types of messages needed (start, stop, ping, keep-alives, etc.).


JSON support:

  Google GSON.


Multiple domain support:

  I will have support for at least three domains right from the beginning: slightlyloony.com, justnorthofparadise.com, and dilatush.com.  SSL is
  negotiated prior to headers being sent, so each separate domain must connect to a different port.  To facilitate this (and to eliminate the need
  for users to enter port numbers), there is a single server on port 80 for HTTP that redirects each virtual host to a separate port on the HTTPS
  server.


Caching:

  Caching should be done through simple string key/string contents LRU caching, with individual caches (for size control) for the various types of
  string content.  Caching of binary content (especially images) needs to be thought out more carefully, but is probably best handled the same way.


Request signatures:

  [www.]<domain>    - request for blog home page
  static.<domain>/? - request for static data, including pages, images, scripts, etc.


Dependencies:

  Web server: Jetty (embedded).  Initially chose Spark, but it was too limited in configuration.
  Login: simple login, home-brew
  Logging: log4j 2
  email: javamail (javax.mail)


Hotlink prevention:

  The usual scheme for this is to use HTTP_REFERER, but that's essentially broken by firewalls and many browsers, which simply delete that header.
  An alternative scheme I cooked up, which I found a few references to on the web (so I'm not the first!), is to require that the request for a
  content object be made in the context of a session.  Essentially that means a session cookie.  It appears that Spark/Jetty already supports an
  ephemeral session cookie, which is perfect for the purpose.
Template Language

  Any text file can be "templatized" simply by including template directives in it.  A template directive may appear anywhere in the template.  Every
  template is surrounded by double braces, like this: {{directive}}.  The directive's opening and closing double braces MUST appear on the same line
  in the source file.  If the source file contains double-braces itself, they must be escaped by using triple braces.  For example, if the source file
  needs to contain the term "abc {{def}} ghi", then it must be escaped as "abc {{{def}}} ghi".

  The template language works with simple expressions comprised of data (either from a source or a constant) and functions (which can combine multiple
  data items to produce a result that's possibly of another type).

  The template language works with data of any Java type, but there is special treatment for integers, booleans, and strings.  Any other type, if used
  as a datum, is converted to a string through the Java .toString() method.  Type conversions will occur when a source is of a different type than
  what a function needs, or to be converted to a string for insertion in the rendered template.  Those conversions follow these rules:

    to string:
      from boolean:        true to "true", false to "false"
      from integer:        through the Integer.toString() method (100 = "100", 4 = "4", -8,400 = "-8400", 0 = "0", etc.)
      from any other type: through the object's .toString() method
      from null:           an empty string ("")

    to integer:
      from string:         if the first character is a digit or minus sign, the leading characters valid for integers are converted, otherwise to 0
      from boolean:        false to 0, true to 1
      from any other type: through the object's .toString() method, then as from a string
      from null:           a 0

    to boolean:
      from string:         an empty string (""), "f", "F", "0", "false", "FALSE" to false, otherwise to true
      from integer:        a 0 to false, otherwise to true
      from any other type: through the object's .toString() method, then as from a string
      from null:           a false


  There are several types of template directives:


  Literals may appear as data, or as arguments to functions.  The template system supports three literal types:

    string:  Arbitrary strings surrounded by double quotes, with the double quote itself escapable with a leading backslash (Java-style).  For
             example, "this", "\"Oh, my!\"", "123", and "true" are all valid string literals.

    integer: Strings of digits (with no quotes) and an optional leading minus sign.  For example, 123, -456, and 4762251823 are all valid integer
             literals.

    boolean: The words true or false, in lower case, are the only valid boolean literals.


  Control:

    These control whether template elements are rendered at all, and also the iteration (repetition) of template elements.  The control directives
    available in the system are:

    .<variable> = <value>

      This sets the value of the variable to the given value.  The <variable> is a named variable which is created or overwritten by this
      directive.  The variable's name MUST start with a period (dot).  The variable's scope (lifetime) is during each template rendering.  Once
      created, a variable is automatically available as a source named .<variableName>.  For instance, a ".x = 0" directive would create the
      variable .x and set it to the value zero.  It would then be available as the source ".x".  A subsequent ".x = add( .x, 1 )"" would have
      the effect of incrementing .x (though there are easier ways of doing this; see below).


    .<variable>++

      This will increment the value of the .<variable>, which must already exist.


    .<variable>--

      This will decrement the value of the .<variable>, which must already exist.


    if( <boolean value> ) ... end

      This is the simplest control directive.  The template elements between the "if( <boolean value> )" and the matching "end" are rendered if the
      value of the <boolean value> is true, and skipped if false.  The <boolean value> is the value, converted to boolean, of any expression
      consisting of sources, functions, or constants.


    if( <boolean value> ) ... else ... end

      This is very similar to the if( <boolean value> ) ... end control directive, except that there are two sequences of template elements.  The
      first one (bounded by if( <boolean value> ) and else) are rendered if the <boolean value> is true, and skipped if false.  The second one
      (bounded by else and end) are rendered if the <boolean value> is false, and skipped if true.  The <boolean value> is the value, converted to
      boolean, of any expression consisting of sources, functions, or constants.


    foreach( <value> in <array> ... end

      This is the basic iteration mechanism for handling an array of values (which may be sources).  Some parts of the system can supply an array of
      such <values> that are sources.  For instance, on the home page there is an array of post sources available, and each post source contains
      information about an individual blog post.  If the foreach( <value> in <array> ) ... end control directive is used for that post information,
      then the text between the foreach( <value> in <array> and the end would be rendered repeatedly, once for each post in the <array>.  This might
      be used to produce the HTML for the home page's list of posts, for example.


    while( <boolean value> ) ... end

      This is a logical iteration mechanism that will repeatedly resolve the template elements between the while( <test> ) and the end for so long as
      the <test> returns true.  It follows that something within these repeatedly rendered template element must change the outcome of the test, or
      the repetitions will continue forever.  One way to do that is to increment a counter, and have the <test> check its value.


  Sources:

    These are named sources of text that may appear anywhere within a template.  The actual text is rendered at the time the template is rendered,
    which is generally while forming the response to a web server request.  A source is specified by a hierarchical name, consisting of components
    separated by periods (dots).  So, for example, the source "user.firstname" would refer to the first name of the user who made the request.
    Similarly, the source "user.last_logged_in.month" would refer first to the user who made the request, then to the time that he last logged in,
    then to the month of that time.  The component parts of path names must use only alphabetic characters, digits, and the underscore ("_")
    character, and each component must start with an alphabetic name.  All other characters in a path are invalid.  Those dotted names represent the
    path through the source hierarchy to get to the individual datum desired.  The sources available in any given template may vary depending on the
    template's context.  For instance, the home page template has access to a source with a list of posts, while a post page template has access to a
    source with detailed post information.  All the sources available in the system are listed in the "Sources.txt" document.


  Functions:

    These transform one or more inputs to produce a new output.  The inputs always include at least one source, and may include any number of other
    parameters.  Functions can operate on any kind of data, and may produce data of a different data type than that provided by their inputs.  All
    the functions available in the system are listed in the "Functions.txt" document.  Functions are usable as sources in control directives and as
    inputs to tests.


  Modes:
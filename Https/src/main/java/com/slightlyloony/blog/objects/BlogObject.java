package com.slightlyloony.blog.objects;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.slightlyloony.blog.handlers.HandlerIllegalArgumentException;
import com.slightlyloony.blog.security.BlogObjectAccessRequirements;

/**
 * Represents an object stored on the blog, which could be metadata, static (including template generated) content, or content generated by code.
 * The class includes provision for either storing the encoded byte form of the object, or as an input stream with known length.  When an instance
 * of this class resides in a cache, it is <i>always</i> in encoded byte form, compressed if possible, to minimize the memory consumed.
 *
 * @author Tom Dilatush  tom@dilatush.com
 */
// TODO: review all blog objects to make sure they are error-free in a concurrent scenario - especially objects like User, Users, Templates...
public abstract class BlogObject {

    protected BlogID blogID;
    protected BlogObjectType type;
    protected BlogObjectAccessRequirements accessRequirements;


    protected BlogObject( final BlogID _id, final BlogObjectType _type, final BlogObjectAccessRequirements _accessRequirements ) {

        if( (_type == null) || (_id == null) )
            throw new HandlerIllegalArgumentException( "Missing required argument _type or _id" );

        type = _type;
        blogID = _id;
        accessRequirements = _accessRequirements;
    }


    /**
     * This constructor should be used by deserializers <i>only</i>.
     */
    protected BlogObject() {
        type = null;
        blogID = null;
        accessRequirements = null;
    }


    /**
     * The approximate memory requirements for this instance, in bytes.
     *
     * @return the approximate number of bytes this instance occupies in memory
     */
    public abstract int size();


    /**
     * The approximate memory requirements for this instance, in bytes.
     *
     * @return the approximate number of bytes this instance occupies in memory
     */
    protected int baseSize() {
        return 36 + 8 + 8;
    }


    /**
     * Resolves this instance into cacheable form, possibly compressed (if content).
     *
     * @param _mayCompress true if this instance may be compressed
     */
    public abstract void makeReadyForCache( final boolean _mayCompress );


    public BlogID getBlogID() {
        return blogID;
    }


    public BlogObjectType getType() {
        return type;
    }


    public BlogObjectAccessRequirements getAccessRequirements() {
        return accessRequirements;
    }


    /**
     * Strips the three fields of this base class from the given JSON element, so that serializers of child classes won't include this
     * redundant information.
     *
     * @param _element the JSON element to have fields stripped from
     */
    protected void stripFields( final JsonElement _element ) {

        if( _element instanceof JsonObject ) {
            JsonObject object = (JsonObject) _element;
            object.remove( "blogID" );
            object.remove( "type" );
            object.remove( "accessRequirements" );
        }
    }
}
